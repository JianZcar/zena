---
name: Build container image
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '05 10 * * *'  # 10:05am UTC everyday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  IMAGE_NAME: "${{ github.event.repository.name }}"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  DEFAULT_TAG: "${{ github.ref_name == 'main' && 'stable' || github.ref_name == 'testing' && 'testing' || 'stable' }}"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      tags: ${{ steps.set_tags.outputs.tags }}
      rechunk_ref: ${{ steps.rechunk.outputs.ref }}

    steps:
      - name: Prepare environment
        run: |
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e
        with:
          remove-codeql: true

      - name: Get current date (UTC)
        id: date
        run: |
          echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "short_date=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Set image tags
        id: set_tags
        run: |
          DATE=${{ steps.date.outputs.short_date }}
          TAGS="${DEFAULT_TAG} ${DEFAULT_TAG}.${DATE}"
          echo "TAGS=$TAGS" >> $GITHUB_ENV
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Prepare build args file
        env:
          DEFAULT_TAG: ${{ env.DEFAULT_TAG }}
        run: |
          cat <<EOF > build_args.txt
          DEFAULT_TAG=${DEFAULT_TAG}
          EOF

      - name: Build image (buildah)
        id: build_image
        run: |
          sudo buildah bud \
            --build-arg-file build_args.txt \
            --format docker \
            --tag "localhost/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}" \
            --file Containerfile

      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@v1.2.3
        with:
          rechunk: 'ghcr.io/hhd-dev/rechunk:v1.2.3'
          ref: "localhost/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}"
          prev-ref: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}"
          skip_compression: false
          version: ${{ steps.set_tags.outputs.tags }}

      - name: Set up skopeo
        uses: warjiang/setup-skopeo@v0.1.3
        with:
          version: latest

      - name: Save rechunked OCI layout to docker-archive
        run: |
          RECHUNK_REF="${{ steps.rechunk.outputs.ref }}"
          echo "Rechunk ref: $RECHUNK_REF"
          skopeo copy "$RECHUNK_REF" docker-archive:image.tar
          sudo chown $(id -u):$(id -g) image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tar
          path: image.tar

  push:
    name: Push
    runs-on: ubuntu-24.04
    needs: build
    if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tar
          path: .

      - name: Load image into podman
        id: load
        run: |
          sudo podman load -i image.tar
          echo "rechunk_ref=${{ needs.build_rechunk.outputs.rechunk_ref }}" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag & Push to GHCR
        env:
          TAGS: ${{ needs.build_rechunk.outputs.tags }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_REGISTRY: ${{ env.IMAGE_REGISTRY }}
          RECHUNK_REF: ${{ needs.build_rechunk.outputs.rechunk_ref }}
        run: |
          for tag in $TAGS; do
            TARGET="${IMAGE_REGISTRY}/${IMAGE_NAME}:$tag"
            echo "Tagging ${RECHUNK_REF} -> ${TARGET}"
            sudo podman tag "${RECHUNK_REF}" "${TARGET}"
            echo "Pushing ${TARGET}"
            sudo podman push "${TARGET}"
          done

      - name: Install Cosign (for signing)
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62

      - name: Sign images with Cosign (optional)
        env:
          TAGS: ${{ needs.build_rechunk.outputs.tags }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_REGISTRY: ${{ env.IMAGE_REGISTRY }}
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        run: |
          for tag in $TAGS; do
            IMAGE_FULL="${IMAGE_REGISTRY}/${IMAGE_NAME}:$tag"
            echo "Signing ${IMAGE_FULL}"
            cosign sign -y --key env://COSIGN_PRIVATE_KEY "${IMAGE_FULL}"
          done

